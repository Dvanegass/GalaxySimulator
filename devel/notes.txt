
Checklist for making a new release:

- Run test suite on as many machines as possible.
- On each machine, run:
  - python setup.py test
  - run_all_tests (in tests directory. go get some coffee...)
  - check_yaml (in examples directory)
  - check_json (in examples directory)
  - check_des (in examples directory)
- Make the release branch for the new minor version. (or switch to it if doing a bugfix release)
    git checkout -b releases/M.m
    git push -u origin releases/M.m
- Update the version number to the new M.m.r value in galsim/_version.py
- Read over the CHANGELOG.rst file and edit as needed.
- Update any docs that might need updating.
- Make sure the current code is installed:
    python setup.py install
- Generate current docs
    update_docs
- Commit and push new docs.
    git add docs/_build
    git commit -m "update docs"
- Make a release
  - On GitHub page, go to Code - Tags - Releases
      (https://github.com/GalSim-developers/GalSim/releases)
  - Draft a new release
  - Set tag version vM.m.r
  - Set target releases/M.m
  - Set title Version M.m.r
  - For text, probably links to CHANGELOG and full docs
  - Publish Release
- Check the twine upload
  - On GitHub page, go to Actions
  - Build wheels and sdist and upload to PyPI
  - Should see an action that started automatically when publishing the release.
  - Check the logs to make sure things seem to have completed correctly.
- Once that action is complete, check pip locally
  - pip install -U galsim
- Back in master, update version number to M.(m+1) (i.e. no .r)
- Cherry-pick any commits that were needed on releases/2.3 that are relevant for main branch.
  - Note: no need to cherry-pick "update docs" commits.
- Move the CHANGELOG information into docs/history.rst and clear out the current CHANGELOG.rst
  file for the next version.
- Email galsim-announce list about the new version.
